package com.pcitc.ubs.utils.page;

import java.lang.reflect.Field;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.List;
import java.util.Properties;

import javax.xml.bind.PropertyException;

import org.apache.commons.lang.StringUtils;
import org.apache.ibatis.executor.ErrorContext;
import org.apache.ibatis.executor.ExecutorException;
import org.apache.ibatis.executor.statement.BaseStatementHandler;
import org.apache.ibatis.executor.statement.RoutingStatementHandler;
import org.apache.ibatis.executor.statement.StatementHandler;
import org.apache.ibatis.mapping.BoundSql;
import org.apache.ibatis.mapping.MappedStatement;
import org.apache.ibatis.mapping.ParameterMapping;
import org.apache.ibatis.mapping.ParameterMode;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.plugin.Intercepts;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.plugin.Plugin;
import org.apache.ibatis.plugin.Signature;
import org.apache.ibatis.reflection.MetaObject;
import org.apache.ibatis.reflection.property.PropertyTokenizer;
import org.apache.ibatis.scripting.xmltags.ForEachSqlNode;
import org.apache.ibatis.session.Configuration;
import org.apache.ibatis.type.TypeHandler;
import org.apache.ibatis.type.TypeHandlerRegistry;

import com.pcitc.ubs.utils.ListToStringUtil;
import com.pcitc.ubs.utils.ReflectHelper;
import com.pcitc.ubs.utils.VerifyHandler;
import com.pcitc.ubs.utils.dataAuthorization.DataAuthorizationUtilEmbed;
import com.pcitc.ubs.utils.sql.appender.SqlAppender;


/**
 * 
 * 类名称：	PagePlugin  
 * 类描述：	分页插件
 * 创建人：  	张本学
 * 创建时间：	2016-2-29 下午2:54:23  
 * 修改人：
 * 修改时间：
 * @version 1.0.0
 */
@Intercepts({@Signature(type = StatementHandler.class, method = "prepare", args = {Connection.class })})
public class PagePlugin implements Interceptor {
	// 数据库方言
	public static String dialect = ""; 
	// 数据库方言
	private static String pageSqlId = "";
	// 是否自动添加appId过滤条件
	private static String appendAppIdFlag = ""; 

	public Object intercept(Invocation ivk) throws Throwable {
		if (ivk.getTarget() instanceof RoutingStatementHandler) {
			RoutingStatementHandler statementHandler = (RoutingStatementHandler) ivk.getTarget();
			BaseStatementHandler delegate = (BaseStatementHandler) ReflectHelper.getValueByFieldName(statementHandler, "delegate");
			MappedStatement mappedStatement = (MappedStatement) ReflectHelper.getValueByFieldName(delegate, "mappedStatement");
			BoundSql boundSql = delegate.getBoundSql();
			// 分页SQL<select>中parameterType属性对应的实体参数，即Mapper接口中执行分页方法的参数,该参数不得为空
			Object parameterObject = boundSql.getParameterObject();
			String sql = boundSql.getSql();
			//try中语句为添加数据权限
			String oldSql=sql;
			try {
				DataAuthorizationUtilEmbed t=new DataAuthorizationUtilEmbed();
				sql=t.intercept(ivk,sql,boundSql,parameterObject,mappedStatement,dialect);
			} catch (Exception e) {
				sql=oldSql.replace("@useDA", "");
			}
			if ("1".equals(appendAppIdFlag)) {
				// 拼上appId限制条件
				sql = SqlAppender.getAppIdSql(sql);
			}
			// 拦截需要分页的SQL
			if (mappedStatement.getId().matches(pageSqlId)) { 
				// 记录统计
				String countSql = null;
				if ("sqlserver".equals(dialect)) {
					String newSqlString = "";
					if (!StringUtils.isBlank(sql)) {
						String[] sqlArr = sql.contains("ORDER BY")?sql.split("ORDER BY"):sql.split("order by");
						newSqlString = sqlArr[0];
					}
					// 记录统计
					countSql = "select count(0) from (" + newSqlString + ") as tmp_count"; 
				} else if ("mysql".equals(dialect)) {
					// 记录统计
					countSql = "select count(0) from (" + sql + ") as tmp_count"; 
				} else if ("oracle".equals(dialect)) {
					// 记录统计
					countSql = "select count(0) from (" + sql + ")  tmp_count";
				}
				Connection connection = (Connection) ivk.getArgs()[0];
				PreparedStatement countStmt = connection.prepareStatement(countSql);
				BoundSql countBS = new BoundSql(mappedStatement.getConfiguration(), countSql, boundSql.getParameterMappings(), parameterObject);
				setParameters(countStmt, mappedStatement, countBS, parameterObject);
				ResultSet rs = countStmt.executeQuery();
				int count = 0;
				if (rs.next()) {
					count = rs.getInt(1);
				}
				rs.close();
				countStmt.close();
				Page page = null;
				// 参数就是Page实体
				if (parameterObject instanceof Page) { 
					page = (Page) parameterObject;
					page.setEntityOrField(true);
					page.setTotalResult(count);
				} else { // 参数为某个实体，该实体拥有Page属性
					Field pageField = ReflectHelper.getFieldByFieldName(parameterObject, "page");
					if (pageField != null) {
						page = (Page) ReflectHelper.getValueByFieldName(parameterObject, "page");
						if (page == null)
							page = new Page();
						page.setEntityOrField(false);
						page.setTotalResult(count);
						// 通过反射，对实体对象设置分页对象
						ReflectHelper.setValueByFieldName(parameterObject, "page", page); 
					} else {
						throw new NoSuchFieldException(parameterObject.getClass().getName() + "不存在 page 属性！");
					}
				}
				String pageSql = generatePageSql(sql, page);
				// 将分页sql语句反射回BoundSql.
				ReflectHelper.setValueByFieldName(boundSql, "sql", pageSql); 
			} else {
				ReflectHelper.setValueByFieldName(boundSql, "sql", sql);
			}
		}
		return ivk.proceed();
	}

	/**
	 * setParameters
	 * (对SQL参数(?)设值,参考org.apache.ibatis.executor.parameter.)
	 * DefaultParameterHandler
	 * @param ps
	 * @param mappedStatement
	 * @param boundSql
	 * @param parameterObject
	 * @throws SQLException
	 */
	@SuppressWarnings({"rawtypes", "unchecked"})
	private void setParameters(PreparedStatement ps,MappedStatement mappedStatement, BoundSql boundSql,Object parameterObject) throws SQLException {
		ErrorContext.instance().activity("setting parameters").object(mappedStatement.getParameterMap().getId());
		List<ParameterMapping> parameterMappings = boundSql.getParameterMappings();
		if (parameterMappings != null) {
			Configuration configuration = mappedStatement.getConfiguration();
			TypeHandlerRegistry typeHandlerRegistry = configuration.getTypeHandlerRegistry();
			MetaObject metaObject = parameterObject == null ? null : configuration.newMetaObject(parameterObject);
			for (int i = 0; i < parameterMappings.size(); i++) {
				ParameterMapping parameterMapping = parameterMappings.get(i);
				if (parameterMapping.getMode() != ParameterMode.OUT) {
					Object value;
					String propertyName = parameterMapping.getProperty();
					PropertyTokenizer prop = new PropertyTokenizer(propertyName);
					if (parameterObject == null) {
						value = null;
					} else if (typeHandlerRegistry.hasTypeHandler(parameterObject.getClass())) {
						value = parameterObject;
					} else if (boundSql.hasAdditionalParameter(propertyName)) {
						value = boundSql.getAdditionalParameter(propertyName);
					} else if (propertyName.startsWith(ForEachSqlNode.ITEM_PREFIX)&& boundSql.hasAdditionalParameter(prop.getName())) {
						value = boundSql.getAdditionalParameter(prop.getName());
						if (value != null) {
							value = configuration.newMetaObject(value).getValue(propertyName.substring(prop.getName().length()));
						}
					} else {
						value = metaObject == null ? null : metaObject.getValue(propertyName);
					}
					TypeHandler typeHandler = parameterMapping.getTypeHandler();
					if (typeHandler == null) {
						throw new ExecutorException(
								"There was no TypeHandler found for parameter "
								+ propertyName + " of statement " + mappedStatement.getId());
					}
					typeHandler.setParameter(ps, i + 1, value, parameterMapping.getJdbcType());
				}
			}
		}
	}

	/**
	 * generatePageSql(根据数据库方言，生成特定的分页sql)
	 * @param sql
	 * @param page
	 * @return
	 */
	private String generatePageSql(String sql, Page page) {
		if (page != null && StringUtils.isNotBlank(dialect)) {
			StringBuffer pageSql = new StringBuffer();
			if ("mysql".equals(dialect)) {
				pageSql.append(sql);
				pageSql.append(" limit " + page.getCurrentResult() + "," + page.getLimit());
			} else if ("oracle".equals(dialect)) {
				pageSql.append("select * from (select tmp_tb.*,ROWNUM row_id from (");
				pageSql.append(sql);
				pageSql.append(") tmp_tb where ROWNUM<=");
				pageSql.append(page.getCurrentResult() + page.getLimit());
				pageSql.append(") where row_id>");
				pageSql.append(page.getCurrentResult());
			} else if ("sqlserver".equals(dialect)) {
				int p = page.getLimit() * (page.getStart() - 1);
				String[] sqlsplit1 = sql.contains("from")? sql.split("from"): sql.split("FROM");
				String selectSqlString = sqlsplit1[0].contains("select")?sqlsplit1[0].split("select")[1]:sqlsplit1[0].split("SELECT")[1];
				String[] sqlsplit2 = sqlsplit1[1].contains("where")?sqlsplit1[1].split("where"):sqlsplit1[1].split("WHERE");
				String fromSqlString = sqlsplit2[0];
				String whereSqlString = null;
				String orderString = null;
				String orderdian = null;
				String[] ordStrings = selectSqlString.split(",");
				String ordersql1 = ordStrings[0];
				String ordersql1dian = null;
				String[] ordersql1dians = ordersql1.split("\\.");
				if (ordersql1dians.length > 1) {
					ordersql1dian = ordersql1dians[1];
				}
				if (sqlsplit2.length > 1) {
					String[] orderSqlString = sqlsplit2[1].contains("ORDER BY")?sqlsplit2[1].split("ORDER BY"):sqlsplit2[1].split("order by");
					whereSqlString = orderSqlString[0];
					if (orderSqlString.length > 1) {
						orderString = orderSqlString[1].trim();
					}
				} else {
					String[] orderSqlString = fromSqlString.contains("ORDER BY")?fromSqlString.split("ORDER BY"):fromSqlString.split("order by");
					fromSqlString = orderSqlString[0];
					if (orderSqlString.length > 1) {
						orderString = orderSqlString[1].trim();
					}
				}
				if (!StringUtils.isBlank(orderString)) {
					String[] orderStrs = orderString.split("\\,");
					if(VerifyHandler.INSTANCE.isVerify(orderStrs)){
						List<String> temp = new ArrayList<>();
						for (String orderStr : orderStrs) {
							String[] orderdians = orderStr.split("\\.");
							if (orderdians.length > 1) {
								temp.add(orderdians[1]);
							} else {
								temp.add(orderdians[0]);
							}
						}
						orderdian = ListToStringUtil.listToString(temp, ", yt.");
					}else{
						orderdian = orderString;
					}
				}

				pageSql.append("select ");
				pageSql.append("TOP " + page.getLimit());
				pageSql.append(" * ");
				String ytW = null;
				if (!StringUtils.isBlank(orderString)) {
					pageSql.append(" from (select ROW_NUMBER() OVER(ORDER BY "
							+ orderString.split(" AS ")[0].split(" as ")[0]
							+ " ) AS RowNumber," + selectSqlString + " from "
							+ fromSqlString);
					ytW = " ) yt where yt.RowNumber>" + p + "  Order by  yt."
							+ orderdian;
				} else {
					pageSql.append(" from (select ROW_NUMBER() OVER(Order by "
							+ ordersql1.split(" AS ")[0].split(" as ")[0]
							+ "  ) AS RowNumber," + selectSqlString + " from "
							+ fromSqlString);
					ytW = " ) yt where yt.RowNumber>" + p;
					if (!StringUtils.isBlank(ordersql1dian)) {
						if (ordersql1dian.contains(" as ")) {
							String[] st = ordersql1dian.split(" as ");
							ytW = ytW + " Order by yt." + st[1] + "  ";
						}else if(ordersql1dian.contains(" AS ")){
							String[] st = ordersql1dian.split(" AS ");
							ytW = ytW + " Order by yt." + st[1] + "  ";
						}
					}
				}
				if (!StringUtils.isBlank(whereSqlString)) {
					pageSql.append(" where " + whereSqlString);
				}
				pageSql.append(ytW);
			}
			return pageSql.toString();
		} else {
			return sql;
		}
	}

	public Object plugin(Object arg0) {
		return Plugin.wrap(arg0, this);
	}

	public void setProperties(Properties p) {
		dialect = p.getProperty("dialect");
		if (StringUtils.isBlank(dialect)) {
			SqlAppender.dialect = dialect;
			try {
				throw new PropertyException("dialect property is not found!");
			} catch (PropertyException e) {
				e.printStackTrace();
			}
		}
		pageSqlId = p.getProperty("pageSqlId");
		if (StringUtils.isBlank(pageSqlId)) {
			try {
				throw new PropertyException("pageSqlId property is not found!");
			} catch (PropertyException e) {
				e.printStackTrace();
			}
		}
		appendAppIdFlag = p.getProperty("appendAppIdFlag");
		if (StringUtils.isBlank(appendAppIdFlag)) {
			try {
				throw new PropertyException(
						"appendAppIdFlag property is not found!");
			} catch (PropertyException e) {
				e.printStackTrace();
			}
		}
	}
}
